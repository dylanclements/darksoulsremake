node n1 {
    type router
    model router
    network-config {
	hostname RA
	!
	interface eth2
	 ip address 176.16.2.29/30
	!
	interface eth1
	 ip address 176.16.2.21/30
	!
	interface eth0
	 ip address 176.16.2.17/30
	!
    }
    canvas c1
    iconcoords {463.0 295.0}
    labelcoords {463.0 327.0}
    interface-peer {eth0 n2}
    interface-peer {eth1 n3}
    interface-peer {eth2 n4}
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 176.16.2.17
	#/sbin/ip route add 10.9.8.0/24 via 176.16.2.21
	#/sbin/ip route add 10.9.8.0/24 via 176.16.2.29
	
	# to C
	ip route add 176.16.0.0/23 via 176.16.2.22
	
	# net c
	ip route add 176.16.0.0/23 via 176.16.2.22
	
	# default
	ip route add default via 176.16.2.18
	}
    }
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	files=('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', '/usr/local/etc/quagga/vtysh.conf', )
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	interface eth0
	  ip address 176.16.2.17/30
	!
	interface eth1
	  ip address 176.16.2.21/30
	!
	interface eth2
	  ip address 176.16.2.29/30
	!
	router rip
	  redistribute static
	  redistribute connected
	  redistribute ospf
	  network 176.16.2.28/30
	  network 176.16.2.20/30
	  network 176.16.2.16/30
	!
	
	}
    }
    services {zebra RIP vtysh IPForward StaticRoute}
}

node n2 {
    type router
    model router
    network-config {
	hostname RB
	!
	interface eth2
	 ip address 176.16.2.1/28
	!
	interface eth1
	 ip address 176.16.2.26/30
	!
	interface eth0
	 ip address 176.16.2.18/30
	!
    }
    canvas c1
    iconcoords {248.0 550.0}
    labelcoords {248.0 582.0}
    interface-peer {eth0 n1}
    interface-peer {eth1 n3}
    interface-peer {eth2 n5}
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 176.16.2.17
	#/sbin/ip route add 10.9.8.0/24 via 176.16.2.25
	#/sbin/ip route add 10.9.8.0/24 via 176.16.2.1
	
	# default 
	ip route add default via 176.16.2.17
	
	# net C
	ip route add 176.16.0.0/23 via 176.16.2.25
	}
    }
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	files=('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', '/usr/local/etc/quagga/vtysh.conf', )
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	interface eth0
	  ip address 176.16.2.18/30
	!
	interface eth1
	  ip address 176.16.2.26/30
	!
	interface eth2
	  ip address 176.16.2.1/28
	!
	router rip
	  redistribute static
	  redistribute connected
	  redistribute ospf
	  network 176.16.2.16/30
	  network 176.16.2.24/30
	  network 176.16.2.0/28
	!
	
	}
    }
    services {zebra RIP vtysh IPForward StaticRoute}
}

node n3 {
    type router
    model router
    network-config {
	hostname RC
	!
	interface eth2
	 ip address 176.16.0.1/23
	!
	interface eth1
	 ip address 176.16.2.22/30
	!
	interface eth0
	 ip address 176.16.2.25/30
	!
    }
    canvas c1
    iconcoords {665.0 552.0}
    labelcoords {665.0 584.0}
    interface-peer {eth0 n2}
    interface-peer {eth1 n1}
    interface-peer {eth2 n6}
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 176.16.2.25
	#/sbin/ip route add 10.9.8.0/24 via 176.16.2.21
	#/sbin/ip route add 10.9.8.0/24 via 176.16.0.1
	
	# to A
	ip route add 176.16.2.28/30 via 176.16.2.21
	# to B
	ip route add 176.16.2.0/28 via 176.16.2.26
	
	# defa
	ip route add default via 176.16.2.21
	}
    }
    custom-config {
	custom-config-id service:DHCP
	custom-command DHCP
	config {
	files=('/etc/dhcp/dhcpd.conf', )
	}
    }
    custom-config {
	custom-config-id service:DHCP:/etc/dhcp/dhcpd.conf
	custom-command /etc/dhcp/dhcpd.conf
	config {
	# auto-generated by DHCP service (utility.py)
	# NOTE: move these option lines into the desired pool { } block(s) below
	#option domain-name "test.com";
	#option domain-name-servers 10.0.0.1;
	#option routers 10.0.0.1;
	
	log-facility local6;
	
	default-lease-time 600;
	max-lease-time 7200;
	
	ddns-update-style none;
	
	subnet 176.16.2.24 netmask 255.255.255.252 {
	  pool {
	    range 176.16.2.25 176.16.2.26;
	    default-lease-time 600;
	    option routers 176.16.2.25;
	  }
	}
	
	
	subnet 176.16.2.20 netmask 255.255.255.252 {
	  pool {
	    range 176.16.2.21 176.16.2.22;
	    default-lease-time 600;
	    option routers 176.16.2.22;
	  }
	}
	
	
	subnet 176.16.0.0 netmask 255.255.254.0 {
	  pool {
	    range 176.16.0.1 176.16.1.254;
	    default-lease-time 600;
	    option routers 176.16.0.1;
	  }
	}
	
	
	}
    }
    services {zebra OSPFv2 OSPFv3 vtysh IPForward StaticRoute DHCP}
}

node n4 {
    type lanswitch
    network-config {
	hostname n4
	!
    }
    canvas c1
    iconcoords {473.0 149.0}
    labelcoords {477.0 188.0}
    interface-peer {e0 n1}
    interface-peer {e1 n7}
}

node n5 {
    type lanswitch
    network-config {
	hostname n5
	!
    }
    canvas c1
    iconcoords {154.0 652.0}
    labelcoords {154.0 676.0}
    interface-peer {e0 n2}
    interface-peer {e1 n8}
    interface-peer {e2 n9}
    interface-peer {e3 n10}
}

node n6 {
    type lanswitch
    network-config {
	hostname n6
	!
    }
    canvas c1
    iconcoords {701.0 643.0}
    labelcoords {701.0 667.0}
    interface-peer {e0 n3}
    interface-peer {e1 n11}
    interface-peer {e2 n12}
    interface-peer {e3 n13}
}

node n7 {
    type router
    model PC
    network-config {
	hostname n7
	!
	interface eth0
	 ip address 176.16.2.30/30
	!
    }
    canvas c1
    iconcoords {279.0 141.0}
    labelcoords {279.0 173.0}
    interface-peer {eth0 n4}
}

node n8 {
    type router
    model PC
    network-config {
	hostname n8
	!
	interface eth0
	 ip address 176.16.2.2/28
	!
    }
    canvas c1
    iconcoords {62.0 523.0}
    labelcoords {40.0 524.0}
    interface-peer {eth0 n5}
}

node n9 {
    type router
    model PC
    network-config {
	hostname n9
	!
	interface eth0
	 ip address 176.16.2.3/28
	!
    }
    canvas c1
    iconcoords {58.0 772.0}
    labelcoords {58.0 804.0}
    interface-peer {eth0 n5}
}

node n10 {
    type router
    model PC
    network-config {
	hostname n10
	!
	interface eth0
	 ip address 176.16.2.4/28
	!
    }
    canvas c1
    iconcoords {269.0 776.0}
    labelcoords {263.0 816.0}
    interface-peer {eth0 n5}
}

node n11 {
    type router
    model PC
    network-config {
	hostname n11
	!
	interface eth0
	!
    }
    canvas c1
    iconcoords {609.0 789.0}
    labelcoords {609.0 821.0}
    interface-peer {eth0 n6}
    services {DefaultRoute DHCPClient}
}

node n12 {
    type router
    model PC
    network-config {
	hostname n12
	!
	interface eth0
	!
    }
    canvas c1
    iconcoords {856.0 757.0}
    labelcoords {856.0 789.0}
    interface-peer {eth0 n6}
    services {DefaultRoute DHCPClient}
}

node n13 {
    type router
    model PC
    network-config {
	hostname n13
	!
	interface eth0
	!
    }
    canvas c1
    iconcoords {906.0 622.0}
    labelcoords {906.0 654.0}
    interface-peer {eth0 n6}
    services {DefaultRoute DHCPClient}
}

link l1 {
    nodes {n1 n2}
    bandwidth 0
}

link l2 {
    nodes {n2 n3}
    bandwidth 0
}

link l3 {
    nodes {n3 n1}
    bandwidth 0
}

link l4 {
    nodes {n3 n6}
    bandwidth 0
}

link l5 {
    nodes {n2 n5}
    bandwidth 0
}

link l6 {
    nodes {n1 n4}
    bandwidth 0
}

link l7 {
    nodes {n4 n7}
    bandwidth 0
}

link l8 {
    nodes {n5 n8}
    bandwidth 0
}

link l9 {
    nodes {n5 n9}
    bandwidth 0
}

link l10 {
    nodes {n5 n10}
    bandwidth 0
}

link l11 {
    nodes {n6 n11}
    bandwidth 0
}

link l12 {
    nodes {n6 n12}
    bandwidth 0
}

link l13 {
    nodes {n6 n13}
    bandwidth 0
}

canvas c1 {
    name {Canvas1}
    refpt {0 0 47.5791667 -122.132322 2.0}
    scale {150.0}
    size {1000 1000}
}

option global {
    interface_names yes
    ip_addresses yes
    ipv6_addresses yes
    node_labels yes
    link_labels yes
    show_api no
    background_images no
    annotations yes
    grid yes
    traffic_start 0
}

option session {
}

